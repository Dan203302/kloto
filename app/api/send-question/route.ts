import { NextResponse } from 'next/server';

const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID;

export async function POST(request: Request) {
  try {
    const formData = await request.json();

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
    let message = '‚ùì *–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å*\n\n';
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    message += '*–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:*\n';
    message += `üë§ –ò–º—è: ${formData.name}\n`;
    message += `üì± –¢–µ–ª–µ—Ñ–æ–Ω: \`${formData.phone}\`\n`;
    message += `üìß Email: \`${formData.email}\`\n\n`;
    
    // –í–æ–ø—Ä–æ—Å
    message += '*–í–æ–ø—Ä–æ—Å:*\n';
    message += `üí≠ ${formData.question}\n`;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
    const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: TELEGRAM_CHAT_ID,
        text: message,
        parse_mode: 'Markdown',
      }),
    });

    if (!response.ok) {
      throw new Error('Failed to send Telegram message');
    }

    return NextResponse.json({ success: true });
  } catch (error) {
    console.error('Error sending question:', error);
    return NextResponse.json(
      { error: 'Failed to send question' },
      { status: 500 }
    );
  }
} 